{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Json1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Jsonoutput",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          coverages as (planCode as string, retailCost as double, term as (termOdometer as integer, termMonths as integer))[],",
				"          dealerNumber as string,",
				"          contractNumber as string,",
				"          saleDate as string,",
				"          saleOdometer as integer,",
				"          startingOdometer as integer,",
				"          endingOdometer as integer,",
				"          vehicle as (vin as string, vehicleAgeType as string),",
				"          customer as (dateOfBirth as string, culture as string, firstName as string, lastName as string, phone as string, email as string, address as (countryCode as string, address1 as string, city as string, state as string, postalCode as string)),",
				"          culture as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> source1",
				"source1 derive(dealerNumber = iif(dealerNumber=='DEALERCREDIT01', \"B1001001\", dealerNumber),",
				"          saleOdometer = \"199\",",
				"          startingOdometer = \"0\",",
				"          {vehicle.vehicleAgeType} = iif(vehicle.vehicleAgeType == \"A\", \"N\", vehicle.vehicleAgeType),",
				"          each(match(vehicle.vehicleAgeType), \"vehicleAgeType1\" = iif(vehicle.vehicleAgeType==\"A\", \"N\", vehicle.vehicleAgeType))) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          coverages as (planCode as string, retailCost as double, term as (termOdometer as integer, termMonths as integer))[],",
				"          dealerNumber as string,",
				"          contractNumber as string,",
				"          saleDate as string,",
				"          saleOdometer as integer,",
				"          startingOdometer as integer,",
				"          endingOdometer as integer,",
				"          vehicle as (vin as string, vehicleAgeType as string),",
				"          customer as (dateOfBirth as string, culture as string, firstName as string, lastName as string, phone as string, email as string, address as (countryCode as string, address1 as string, city as string, state as string, postalCode as string)),",
				"          culture as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}